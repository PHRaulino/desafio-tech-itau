// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: pedidos.sql

package repositorios

import (
	"context"
	"database/sql"
)

const adicionaComboPedido = `-- name: AdicionaComboPedido :exec
INSERT INTO pedidos_produtos (
    pedido_id,
    combo_id,
    nome,
    descricao,
    quantidade,
    total,
    tipo,
    data_criacao,
    ultima_atualizacao
)
SELECT
    ?1,
    c.id,
    c.nome,
    c.descricao,
    ?2,
    c.valor * ?2,
    'combo',
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
FROM combos c
WHERE c.id = ?3
`

type AdicionaComboPedidoParams struct {
	PedidoID   string
	Quantidade float64
	ComboID    string
}

func (q *Queries) AdicionaComboPedido(ctx context.Context, arg AdicionaComboPedidoParams) error {
	_, err := q.db.ExecContext(ctx, adicionaComboPedido, arg.PedidoID, arg.Quantidade, arg.ComboID)
	return err
}

const adicionaIngressoPedido = `-- name: AdicionaIngressoPedido :exec
INSERT INTO pedidos_ingressos (
    pedido_id,
    ingresso_id,
    data_criacao,
    ultima_atualizacao
)
SELECT
    ?1,
    i.id,
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
FROM ingressos i
WHERE i.id = ?2
`

type AdicionaIngressoPedidoParams struct {
	PedidoID   string
	IngressoID string
}

func (q *Queries) AdicionaIngressoPedido(ctx context.Context, arg AdicionaIngressoPedidoParams) error {
	_, err := q.db.ExecContext(ctx, adicionaIngressoPedido, arg.PedidoID, arg.IngressoID)
	return err
}

const adicionaProdutoPedido = `-- name: AdicionaProdutoPedido :exec
INSERT INTO pedidos_produtos (
    pedido_id,
    produto_id,
    nome,
    descricao,
    quantidade,
    total,
    tipo,
    data_criacao,
    ultima_atualizacao
)
SELECT
    ?1,
    produtos.id,
    produtos.nome,
    produtos.descricao,
    ?2,
    produtos.valor * ?2,
    'avulso',
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
FROM produtos
WHERE produtos.id = ?3
`

type AdicionaProdutoPedidoParams struct {
	PedidoID   string
	Quantidade float64
	ProdutoID  string
}

func (q *Queries) AdicionaProdutoPedido(ctx context.Context, arg AdicionaProdutoPedidoParams) error {
	_, err := q.db.ExecContext(ctx, adicionaProdutoPedido, arg.PedidoID, arg.Quantidade, arg.ProdutoID)
	return err
}

const adicionaProdutosComboPedido = `-- name: AdicionaProdutosComboPedido :exec

INSERT INTO pedidos_produtos (
    pedido_id,
    produto_id,
    combo_id,
    nome,
    descricao,
    quantidade,
    total,
    tipo,
    data_criacao,
    ultima_atualizacao
)
SELECT
    ?1,
    p.id,
    c.id,
    p.nome,
    p.descricao,
    ?2,
    0,
    'combo',
    CURRENT_TIMESTAMP,
    CURRENT_TIMESTAMP
FROM combos c
JOIN combos_produtos cp ON c.id = cp.combo_id
JOIN produtos p ON cp.produto_id = p.id
WHERE c.id = ?3
`

type AdicionaProdutosComboPedidoParams struct {
	PedidoID   string
	Quantidade float64
	ComboID    string
}

func (q *Queries) AdicionaProdutosComboPedido(ctx context.Context, arg AdicionaProdutosComboPedidoParams) error {
	_, err := q.db.ExecContext(ctx, adicionaProdutosComboPedido, arg.PedidoID, arg.Quantidade, arg.ComboID)
	return err
}

const atualizaStatusPedido = `-- name: AtualizaStatusPedido :exec
UPDATE
    pedidos
SET
    status = ?1,
    ultima_atualizacao = CURRENT_TIMESTAMP
WHERE
    id = ?2
`

type AtualizaStatusPedidoParams struct {
	Status   string
	PedidoID string
}

func (q *Queries) AtualizaStatusPedido(ctx context.Context, arg AtualizaStatusPedidoParams) error {
	_, err := q.db.ExecContext(ctx, atualizaStatusPedido, arg.Status, arg.PedidoID)
	return err
}

const buscaPedidoPendente = `-- name: BuscaPedidoPendente :one
SELECT
    id
FROM
    pedidos
WHERE
    usuario_id = ?1
    AND status = 'pendente'
`

func (q *Queries) BuscaPedidoPendente(ctx context.Context, usuarioID string) (string, error) {
	row := q.db.QueryRowContext(ctx, buscaPedidoPendente, usuarioID)
	var id string
	err := row.Scan(&id)
	return id, err
}

const consultaPedido = `-- name: ConsultaPedido :one
SELECT
    p.id,
    p.usuario_id,
    p.status,
    p.data_criacao,
    p.ultima_atualizacao
FROM
    pedidos p
WHERE
    p.id = ?1
`

func (q *Queries) ConsultaPedido(ctx context.Context, pedidoID string) (Pedido, error) {
	row := q.db.QueryRowContext(ctx, consultaPedido, pedidoID)
	var i Pedido
	err := row.Scan(
		&i.ID,
		&i.UsuarioID,
		&i.Status,
		&i.DataCriacao,
		&i.UltimaAtualizacao,
	)
	return i, err
}

const consultaTotalPedido = `-- name: ConsultaTotalPedido :one
WITH total_ingressos AS (
    SELECT
        SUM(ingressos.valor) AS total
    FROM
        pedidos_ingressos
        INNER JOIN ingressos ON pedidos_ingressos.ingresso_id = ingressos.id
    WHERE
        pedidos_ingressos.pedido_id = ?1
), total_produtos AS (
    SELECT
        SUM(pedidos_produtos.total) AS total
    FROM
        pedidos_produtos
    WHERE
        pedidos_produtos.pedido_id = ?1
)
SELECT
    CAST(COALESCE(total_ingressos.total, 0) + COALESCE(total_produtos.total, 0) AS REAL)AS total
FROM
    total_ingressos,
    total_produtos
`

func (q *Queries) ConsultaTotalPedido(ctx context.Context, pedidoID string) (float64, error) {
	row := q.db.QueryRowContext(ctx, consultaTotalPedido, pedidoID)
	var total float64
	err := row.Scan(&total)
	return total, err
}

const criaPedido = `-- name: CriaPedido :exec
INSERT INTO
    pedidos (
        id,
        usuario_id,
        status,
        data_criacao,
        ultima_atualizacao
    )
VALUES
    (
        ?1,
        ?2,
        'pendente',
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP
    )
`

type CriaPedidoParams struct {
	ID        string
	UsuarioID string
}

func (q *Queries) CriaPedido(ctx context.Context, arg CriaPedidoParams) error {
	_, err := q.db.ExecContext(ctx, criaPedido, arg.ID, arg.UsuarioID)
	return err
}

const listaItensPorPedido = `-- name: ListaItensPorPedido :many
WITH
    filmes_sessao AS (
        SELECT
            sessoes.id,
            filmes.nome AS nome_filme,
            salas.numero || ' (' || cinemas.nome || ')' AS nome_sala
        FROM
            sessoes
            INNER JOIN filmes ON sessoes.filme_id = filmes.id
            INNER JOIN salas ON sessoes.sala_id = salas.id
            INNER JOIN cinemas ON salas.cinema_id = cinemas.id
    ),
    pedidos_produtos_detalhe AS (
        SELECT
            pedidos_produtos.nome,
            pedidos_produtos.descricao,
            CAST(pedidos_produtos.quantidade AS INTEGER) quantidade,
            pedidos_produtos.total,
            'reservado' AS status,
            pedidos_produtos.tipo,
            '' AS ingresso_id,
            '' AS sessao_id,
            '' AS assento_id
        FROM
            pedidos_produtos
        WHERE
            pedidos_produtos.pedido_id = ?1
    ),
    pedidos_ingressos_detalhe AS (
        SELECT
            filmes_sessao.nome_filme AS nome,
            filmes_sessao.nome_filme || ' - ' || assentos.fileira || assentos.numero || ' (Sala: ' || filmes_sessao.nome_sala || ')' AS descricao,
            1 as quantidade,
            ingressos.valor as total,
            ingressos.status AS status,
            'ingresso' AS tipo,
            ingressos.id AS ingresso_id,
            ingressos.sessao_id AS sessao_id,
            ingressos.assento_id AS assento_id
        FROM
            pedidos_ingressos
            INNER JOIN ingressos ON pedidos_ingressos.ingresso_id = ingressos.id
            INNER JOIN filmes_sessao ON ingressos.sessao_id = filmes_sessao.id
            INNER JOIN assentos ON ingressos.assento_id = assentos.id
        WHERE
            pedidos_ingressos.pedido_id = ?1
    )
SELECT
    nome, descricao, quantidade, total, status, tipo, ingresso_id, sessao_id, assento_id
FROM
    pedidos_produtos_detalhe
UNION ALL
SELECT
    nome, descricao, quantidade, total, status, tipo, ingresso_id, sessao_id, assento_id
FROM
    pedidos_ingressos_detalhe
`

type ListaItensPorPedidoRow struct {
	Nome       string
	Descricao  string
	Quantidade int64
	Total      float64
	Status     string
	Tipo       string
	IngressoID string
	SessaoID   string
	AssentoID  string
}

func (q *Queries) ListaItensPorPedido(ctx context.Context, pedidoID string) ([]ListaItensPorPedidoRow, error) {
	rows, err := q.db.QueryContext(ctx, listaItensPorPedido, pedidoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListaItensPorPedidoRow
	for rows.Next() {
		var i ListaItensPorPedidoRow
		if err := rows.Scan(
			&i.Nome,
			&i.Descricao,
			&i.Quantidade,
			&i.Total,
			&i.Status,
			&i.Tipo,
			&i.IngressoID,
			&i.SessaoID,
			&i.AssentoID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeComboPedido = `-- name: RemoveComboPedido :exec
DELETE FROM pedidos_produtos
WHERE pedido_id = ?1 AND combo_id = ?2 AND tipo = ?3
`

type RemoveComboPedidoParams struct {
	PedidoID string
	ComboID  sql.NullString
	ItemTipo string
}

func (q *Queries) RemoveComboPedido(ctx context.Context, arg RemoveComboPedidoParams) error {
	_, err := q.db.ExecContext(ctx, removeComboPedido, arg.PedidoID, arg.ComboID, arg.ItemTipo)
	return err
}

const removeIngressoPedido = `-- name: RemoveIngressoPedido :exec
DELETE FROM pedidos_ingressos
WHERE pedido_id = ?1 AND ingresso_id = ?2
`

type RemoveIngressoPedidoParams struct {
	PedidoID   string
	IngressoID string
}

func (q *Queries) RemoveIngressoPedido(ctx context.Context, arg RemoveIngressoPedidoParams) error {
	_, err := q.db.ExecContext(ctx, removeIngressoPedido, arg.PedidoID, arg.IngressoID)
	return err
}

const removeProdutoPedido = `-- name: RemoveProdutoPedido :exec
DELETE FROM pedidos_produtos
WHERE pedido_id = ?1 AND produto_id = ?2 AND tipo = ?3
`

type RemoveProdutoPedidoParams struct {
	PedidoID  string
	ProdutoID sql.NullString
	ItemTipo  string
}

func (q *Queries) RemoveProdutoPedido(ctx context.Context, arg RemoveProdutoPedidoParams) error {
	_, err := q.db.ExecContext(ctx, removeProdutoPedido, arg.PedidoID, arg.ProdutoID, arg.ItemTipo)
	return err
}

const verificaQuantidadeItemPedido = `-- name: VerificaQuantidadeItemPedido :one
SELECT
    pedidos_produtos.quantidade
FROM
    pedidos_produtos
WHERE
    pedidos_produtos.pedido_id = ?1
    AND pedidos_produtos.tipo = ?2
    AND (
        pedidos_produtos.produto_id = ?3
        OR pedidos_produtos.combo_id = ?3
    )
`

type VerificaQuantidadeItemPedidoParams struct {
	PedidoID string
	ItemTipo string
	ItemID   sql.NullString
}

func (q *Queries) VerificaQuantidadeItemPedido(ctx context.Context, arg VerificaQuantidadeItemPedidoParams) (float64, error) {
	row := q.db.QueryRowContext(ctx, verificaQuantidadeItemPedido, arg.PedidoID, arg.ItemTipo, arg.ItemID)
	var quantidade float64
	err := row.Scan(&quantidade)
	return quantidade, err
}
