// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: usuarios.sql

package repositorios

import (
	"context"
)

const buscaUsuario = `-- name: BuscaUsuario :one
SELECT id, email, nome, data_criacao, ultima_atualizacao FROM usuarios
WHERE usuarios.id = ?1
`

func (q *Queries) BuscaUsuario(ctx context.Context, usuarioID string) (Usuario, error) {
	row := q.db.QueryRowContext(ctx, buscaUsuario, usuarioID)
	var i Usuario
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Nome,
		&i.DataCriacao,
		&i.UltimaAtualizacao,
	)
	return i, err
}

const criaUsuario = `-- name: CriaUsuario :exec
INSERT INTO usuarios
    (
        nome,
        email,
        id
    )
VALUES
    (
        ?1,
        ?2,
        ?3
    )
`

type CriaUsuarioParams struct {
	Nome  string
	Email string
	ID    string
}

func (q *Queries) CriaUsuario(ctx context.Context, arg CriaUsuarioParams) error {
	_, err := q.db.ExecContext(ctx, criaUsuario, arg.Nome, arg.Email, arg.ID)
	return err
}

const listaUsuarios = `-- name: ListaUsuarios :many
SELECT id, email, nome, data_criacao, ultima_atualizacao FROM usuarios
`

func (q *Queries) ListaUsuarios(ctx context.Context) ([]Usuario, error) {
	rows, err := q.db.QueryContext(ctx, listaUsuarios)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Usuario
	for rows.Next() {
		var i Usuario
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Nome,
			&i.DataCriacao,
			&i.UltimaAtualizacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
