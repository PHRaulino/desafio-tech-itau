// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ingressos.sql

package repositorios

import (
	"context"
)

const atualizaStatusIngresso = `-- name: AtualizaStatusIngresso :exec
UPDATE
    ingressos
SET
    status = ?1,
    ultima_atualizacao = CURRENT_TIMESTAMP
WHERE
    id = ?2
`

type AtualizaStatusIngressoParams struct {
	Status     string
	IngressoID string
}

func (q *Queries) AtualizaStatusIngresso(ctx context.Context, arg AtualizaStatusIngressoParams) error {
	_, err := q.db.ExecContext(ctx, atualizaStatusIngresso, arg.Status, arg.IngressoID)
	return err
}

const consultaValorIngresso = `-- name: ConsultaValorIngresso :one
SELECT
    id, valor, tipo, data_criacao, ultima_atualizacao
FROM
    "valor_ingresso"
WHERE
    "tipo" = ?
LIMIT
    1
`

func (q *Queries) ConsultaValorIngresso(ctx context.Context, tipo string) (ValorIngresso, error) {
	row := q.db.QueryRowContext(ctx, consultaValorIngresso, tipo)
	var i ValorIngresso
	err := row.Scan(
		&i.ID,
		&i.Valor,
		&i.Tipo,
		&i.DataCriacao,
		&i.UltimaAtualizacao,
	)
	return i, err
}

const criaIngresso = `-- name: CriaIngresso :exec
INSERT INTO ingressos
    (
        id,
        sessao_id,
        assento_id,
        usuario_id,
        status,
        valor,
        data_criacao,
        ultima_atualizacao
    )
    VALUES
    (
        ?1,
        ?2,
        ?3,
        ?4,
        'reservado',
        ?5,
        CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP
    )
`

type CriaIngressoParams struct {
	IngressoID string
	SessaoID   string
	AssentoID  string
	UsuarioID  string
	Valor      float64
}

func (q *Queries) CriaIngresso(ctx context.Context, arg CriaIngressoParams) error {
	_, err := q.db.ExecContext(ctx, criaIngresso,
		arg.IngressoID,
		arg.SessaoID,
		arg.AssentoID,
		arg.UsuarioID,
		arg.Valor,
	)
	return err
}

const listaIngressos = `-- name: ListaIngressos :many
SELECT
    ingressos.id AS ingresso_id,
    ingressos.sessao_id,
    ingressos.assento_id,
    ingressos.usuario_id,
    ingressos.status,
    ingressos.valor
FROM ingressos
WHERE
    (?1 IS NULL OR ingressos.sessao_id = ?1)
    AND (?2 IS NULL OR ingressos.assento_id = ?2)
    AND (?3 IS NULL OR ingressos.usuario_id = ?3)
`

type ListaIngressosParams struct {
	SessaoID  interface{}
	AssentoID interface{}
	UsuarioID interface{}
}

type ListaIngressosRow struct {
	IngressoID string
	SessaoID   string
	AssentoID  string
	UsuarioID  string
	Status     string
	Valor      float64
}

func (q *Queries) ListaIngressos(ctx context.Context, arg ListaIngressosParams) ([]ListaIngressosRow, error) {
	rows, err := q.db.QueryContext(ctx, listaIngressos, arg.SessaoID, arg.AssentoID, arg.UsuarioID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListaIngressosRow
	for rows.Next() {
		var i ListaIngressosRow
		if err := rows.Scan(
			&i.IngressoID,
			&i.SessaoID,
			&i.AssentoID,
			&i.UsuarioID,
			&i.Status,
			&i.Valor,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
