// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: produtos.sql

package repositorios

import (
	"context"
	"time"
)

const listaCombos = `-- name: ListaCombos :many
SELECT
    id, nome, descricao, valor, data_criacao, ultima_atualizacao
FROM
    "combos"
`

func (q *Queries) ListaCombos(ctx context.Context) ([]Combo, error) {
	rows, err := q.db.QueryContext(ctx, listaCombos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Combo
	for rows.Next() {
		var i Combo
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Valor,
			&i.DataCriacao,
			&i.UltimaAtualizacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listaProdutos = `-- name: ListaProdutos :many
SELECT
    id, nome, descricao, valor, data_criacao, ultima_atualizacao
FROM
    "produtos"
`

func (q *Queries) ListaProdutos(ctx context.Context) ([]Produto, error) {
	rows, err := q.db.QueryContext(ctx, listaProdutos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Produto
	for rows.Next() {
		var i Produto
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Valor,
			&i.DataCriacao,
			&i.UltimaAtualizacao,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listaProdutosPorCombo = `-- name: ListaProdutosPorCombo :many
SELECT
    id, nome, descricao, valor, produtos.data_criacao, produtos.ultima_atualizacao, combo_id, produto_id, combos.data_criacao, combos.ultima_atualizacao
FROM
    "produtos" produtos
    INNER JOIN "combos_produtos" combos ON produtos.id = combos.produto_id
WHERE
    combos.combo_id = ?
`

type ListaProdutosPorComboRow struct {
	ID                  string
	Nome                string
	Descricao           string
	Valor               float64
	DataCriacao         time.Time
	UltimaAtualizacao   time.Time
	ComboID             string
	ProdutoID           string
	DataCriacao_2       time.Time
	UltimaAtualizacao_2 time.Time
}

func (q *Queries) ListaProdutosPorCombo(ctx context.Context, comboID string) ([]ListaProdutosPorComboRow, error) {
	rows, err := q.db.QueryContext(ctx, listaProdutosPorCombo, comboID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListaProdutosPorComboRow
	for rows.Next() {
		var i ListaProdutosPorComboRow
		if err := rows.Scan(
			&i.ID,
			&i.Nome,
			&i.Descricao,
			&i.Valor,
			&i.DataCriacao,
			&i.UltimaAtualizacao,
			&i.ComboID,
			&i.ProdutoID,
			&i.DataCriacao_2,
			&i.UltimaAtualizacao_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
